version: '2'
services:
  dev:
    build: .
    environment:
      DB_HOST: db # The "db" hostname will point at the container named "db" automatically (defined below)
      # The following can be changed to whatever you want
      DB_NAME: my-app
      DB_USERNAME: dbuser
      DB_PASSWORD: password123
    ports:
      # This is so you can go to localhost:3000 like you're used to. Otherwise, a port would be randomly mapped.
      - "3000:3000"
    command: bundle exec rails s -p 3000 -b '0.0.0.0'
    volumes:
      # This will mount your "gems" volume (defined below as your external gem volumes) onto /gems
      - gems:/gems
      # This will mount ., your app code, into the /app directory within the container
      - .:/app
      # Mount your SSH keys into the container to allow git push (optional)
      - $HOME/.ssh:/root/.ssh
    links:
        - db
  db:
    image: postgres
    environment:
      # These variables are special to the official PG image, see: https://hub.docker.com/_/postgres/
      POSTGRES_DB: my-app # match DB_NAME from above
      POSTGRES_USER: dbuser # match DB_USERNAME from above
      POSTGRES_PASS: password123 # match DB_PASSWORD from above
    ports:
      - "5432:5432"
    volumes:
      # Same idea as gems above, this will prevent you from losing DB data when re-creating the container
      - db:/var/lib/postgresql
volumes:
  db: {}
  gems:
    # Flagging this as "external" means it will use the volume named "gems" on the host instead of making a new volume specific to this docker-compose file
    external: true